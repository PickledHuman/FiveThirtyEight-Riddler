package riddler;

import java.util.ArrayList;
import java.util.List;

public class Riddler {

    public static void main(String[] args) {
        Riddler riddler = new Riddler();
        try {
            long startTime = System.nanoTime();
            riddler.solve();
            long endTime = System.nanoTime();
            long duration = (endTime - startTime);
            System.out.println("Executed in " + duration / Math.pow(10, 6) + " milliseconds.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void solve() {
        String[] states = {"AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","DC","GU","FM","PR","MP","AS","MH","PW","VI"};
        int[][] degree = new int[26][2];
        
        for (String s : states) {
            degree[s.charAt(0)-'A'][1]++;
            degree[s.charAt(1)-'A'][0]++;
        }
        
        for (int i = 0; i < 26; i++) {
            if (degree[i][0]+degree[i][1] > 0)
                System.out.println((char)(i+'A')+" "+degree[i][0]+" "+degree[i][1]+" "+(degree[i][0] == 0 ? "start" : "")+(degree[i][1] == 0 ? "end" : ""));
            else {
                System.out.println((char)(i+'A')+" 0 0 unvisited");
            }
        }
        
        List<Node> nodes = new ArrayList<Node>();
        for (String s : states) {
            nodes.add(new Node(s));
        }
        for (Node n : nodes) {
            for (Node t : nodes) {
                if (n.state.equals(t.state)) continue;
                if (n.state.charAt(1) == t.state.charAt(0)) n.to.add(t);
            }
        }
        
        String winner = "";
        String contender;
        for (Node n : nodes) {
            n.visited = true;
            contender = longestPath(nodes, n, n.state);
            System.out.println(n.state+": "+contender+" "+contender.length());
            if (contender.length() > winner.length())
                winner = contender;
            n.visited = false;
        }
        System.out.println("WINNER: "+winner);
    }
    
    public static String longestPath(List<Node> nodes, Node curr, String path) {
        String contender;
        String winner = path;
        for (Node n : nodes) {
            if (!n.visited && n.state.charAt(0) == path.charAt(path.length()-1)) {
                n.visited = true;
                contender = longestPath(nodes, n, path+n.state.charAt(1));
                if (contender.length() > winner.length()) winner = contender;
                n.visited = false;
            }
        }
        return winner;
    }
    
    public static class Node {
        protected String state;
        protected List<Node> to;
        protected boolean visited;
        
        public Node (String s) {
            this.state = s;
            this.to = new ArrayList<Node>();
            this.visited = false;
        }
    }
}
